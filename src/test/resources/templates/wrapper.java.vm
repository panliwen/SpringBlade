/**
 * Copyright (c) 2018-2028, Chill Zhuang 庄骞 (smallchill@163.com).
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#set($wrapperPackage=$package.Entity.replace("entity","wrapper"))
package $!{wrapperPackage};

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import org.springblade.core.mp.support.BaseEntityWrapper;
import org.springblade.core.tool.utils.BeanUtil;
import org.springblade.modules.system.mapper.UserMapper;
import org.springblade.core.tool.node.ForestNodeMerger;
import java.util.List;
import java.util.stream.Collectors;
import org.springblade.core.tool.node.INode;
import $!{package.Entity}.$!{entity};
#set($voPackage=$package.Entity.replace("entity","vo"))
import $!{voPackage}.$!{entity}VO;
import javax.annotation.PostConstruct;
import javax.annotation.Resource;
import org.springblade.modules.system.entity.User;
import org.springframework.stereotype.Component;
import org.springblade.core.tool.utils.Func;

/**
 * $!{table.comment} 包装类,返回视图层所需的字段
 *
 * @author $!{author}
 * @since $!{date}
 */
@AllArgsConstructor
#if($!{superEntityClass})
@NoArgsConstructor
#end
@Component
public class $!{entity}Wrapper extends BaseEntityWrapper<$!{entity}, $!{entity}VO>  {

    public static $!{entity}Wrapper wrapper;

    @PostConstruct
    public void init(){
        wrapper=this;
    }

#if($!{superEntityClass})
    @Resource private UserMapper userMapper;
#end
	@Override
	public $!{entity}VO entityVO($!{entity} $!{table.entityPath}) {
	    if(Func.isNull($!{table.entityPath})) return new $!{entity}VO();
		$!{entity}VO $!{table.entityPath}VO = BeanUtil.copy($!{table.entityPath}, $!{entity}VO.class);
#if($!{superEntityClass})
        User createUser = wrapper.userMapper.selectById(Func.toLong($!{table.entityPath}VO.getCreateUser()));
        if(null!=createUser) $!{table.entityPath}VO.setCreateUserName(createUser.getName());
        User updateUser = wrapper.userMapper.selectById(Func.toLong($!{table.entityPath}VO.getUpdateUser()));
        if(null!=updateUser) $!{table.entityPath}VO.setUpdateUserName(updateUser.getName());

#end
		return $!{table.entityPath}VO;
	}

#if($!{superEntityClass})
    public List<INode> listNodeVO(List<$!{entity}> list) {
        List<INode> collect = list.stream().map($!{table.entityPath} -> BeanUtil.copy($!{table.entityPath}, $!{entity}VO.class)).collect(Collectors.toList());
        return ForestNodeMerger.merge(collect);
    }
#end

}
