/**
 * Copyright (c) 2018-2028, Chill Zhuang 庄骞 (smallchill@163.com).
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package $!{package.Controller};

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import javax.validation.Valid;
import org.apache.commons.lang3.StringUtils;
import org.springblade.core.mp.support.Condition;
import org.springblade.core.mp.support.Query;
import org.springblade.core.tool.api.R;
import org.springblade.core.tool.utils.Func;
import org.springframework.web.bind.annotation.*;
import org.springframework.transaction.annotation.Transactional;
import org.springblade.core.secure.BladeUser;
#if($!{superEntityClass})
import org.springframework.web.bind.annotation.RequestParam;
#end
import com.baomidou.mybatisplus.core.metadata.IPage;
import java.util.List;
import $!{package.Entity}.$!{entity};
#set($voPackage=$package.Entity.replace("entity","vo"))
import $!{voPackage}.$!{entity}VO;
#set($wrapperPackage=$package.Entity.replace("entity","wrapper"))
import $!{package.Service}.$!{table.serviceName};
#if($!{superControllerClassPackage})
import $!{superControllerClassPackage};
#end
#if(!$!{superEntityClass})
#end

/**
 * $!{table.comment} 控制器
 *
 * @author $!{author}
 * @since $!{date}
 */
@RestController
@AllArgsConstructor
@RequestMapping("#if($!{package.ModuleName})/$!{package.ModuleName}#end/$!{table.entityPath}")
@Api(value = "$!{table.comment}", tags = "$!{table.comment}接口")
@Transactional(rollbackFor = Exception.class)
@Slf4j
#if($!{superControllerClass})
public class $!{table.controllerName} extends $!{superControllerClass} {
#else
public class $!{table.controllerName} {
#end

	private $!{table.serviceName} $!{table.entityPath}Service;

	/**
	* 详情
	*/
	@PostMapping("/detail")
	@ApiOperation(value = "详情", notes = "传入$!{table.entityPath}VO")
    //@Cacheable(cacheNames = CACHE_BASECOMPANY, key = "'$!{table.entityPath}_detail_'+#$!{table.entityPath}.id+'_'+#bladeUser.userId")
	public R detail($!{entity}VO $!{table.entityPath}VO,BladeUser bladeUser) {
        $!{table.entityPath}VO=$!{table.entityPath}Service.detail$!{entity}($!{table.entityPath}VO);
		return R.data($!{table.entityPath}VO);
	}

	/**
	* 分页 $!{table.comment}
	*/
	@PostMapping("/list")
	@ApiOperation(value = "列表与分页", notes = "传入$!{table.entityPath}VO")
    //@Cacheable(cacheNames = CACHE_BASECOMPANY, keyGenerator="userCacheKeyGenerator")
	public R list($!{entity}VO $!{table.entityPath}VO, Query query) {
        IPage<$!{entity}VO> pages = $!{table.entityPath}Service.select$!{entity}sPage(Condition.getPage(query),$!{table.entityPath}VO);
		return R.data(pages);
	}

	/**
	* 新增 $!{table.comment}
	*/
	@PostMapping("/save")
	@ApiOperation(value = "新增", notes = "传入$!{table.entityPath}")
    //@CacheEvict(cacheNames = CACHE_BASECOMPANY,allEntries=true,beforeInvocation=true)
	public R save(@Valid @RequestBody $!{entity}VO $!{table.entityPath}VO) {

        $!{table.entityPath}Service.save($!{table.entityPath}VO);
        Long $!{table.entityPath}Id = $!{table.entityPath}VO.getId();
        log.info("$!{table.entityPath}Id ==================== "+$!{table.entityPath}Id);

	    return R.data(Boolean.TRUE);
	}

	/**
	* 修改 $!{table.comment}
	*/
	@PostMapping("/update")
	@ApiOperation(value = "修改", notes = "传入$!{table.entityPath}")
    //@CacheEvict(cacheNames = CACHE_BASECOMPANY,allEntries=true,beforeInvocation=true)
    //@CachePut(cacheNames = CACHE_BASECOMPANY, key = "'$!{table.entityPath}_detail_'+#$!{table.entityPath}VO.id+'_'+#bladeUser.userId")
	public R update(@Valid @RequestBody $!{entity}VO $!{table.entityPath}VO,BladeUser bladeUser) {

        $!{table.entityPath}Service.updateById($!{table.entityPath}VO);
        Long $!{table.entityPath}Id = $!{table.entityPath}VO.getId();
        log.info("$!{table.entityPath}Id ==================== "+$!{table.entityPath}Id);

        return R.data(Boolean.TRUE);
	}

	#if($!{superEntityClass})/**
	* 删除 $!{table.comment}
	*/
	@PostMapping("/remove")
	@ApiOperation(value = "逻辑删除", notes = "传入ids")
    //@CacheEvict(cacheNames = CACHE_BASECOMPANY,allEntries=true,beforeInvocation=true)
	public R remove(@ApiParam(value = "主键集合", required = true) @RequestParam String ids) {
        if (Func.isNotEmpty(ids)) {
            List<Long> idList = Func.toLongList(ids);
            for (Long baseId : idList) {
                //
                $!{table.entityPath}Service.deleteLogic(Func.toLongList(baseId.toString()));
            }
        }
		return R.data(Boolean.TRUE);
	}
	#else/**
	* 删除 $!{table.comment}
	*/
	@PostMapping("/remove")
	@ApiOperation(value = "删除", notes = "传入ids")
    //@CacheEvict(cacheNames = CACHE_BASECOMPANY,allEntries=true,beforeInvocation=true)
	public R remove(@ApiParam(value = "主键集合", required = true) @RequestParam String ids) {
        if (Func.isNotEmpty(ids)) {
            List<Long> idList = Func.toLongList(ids);
            for (Long baseId : idList) {
                //
                $!{table.entityPath}Service.removeById(baseId);
            }
        }
		return R.data(Boolean.TRUE);
	}
	#end

}
